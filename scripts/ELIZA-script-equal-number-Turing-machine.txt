; Script for Joseph Weizenbaum's ELIZA to decide if a string
; contains an equal number of A and B characters.

(ELIZA CAN DECIDE IF A SEQUENCE CONTAINS AN EQUAL NUMBER
 OF THE LETTERS A AND B.
 TYPE THE WORD EQUAL FOLLOWED BY A STRING OF A AND B LETTERS,
 WITH SPACES BETWEEN EACH LETTER. ELIZA WILL RESPOND YES IF
 THERE ARE THE SAME NUMBER OF A LETTERS AS THERE ARE OF B LETTERS,
 OTHERWISE ELIZA SAYS NO.
 E.G. TYPE 'EQUAL A A B B' AND ELIZA WILL RESPOND YES.
 USE THE *TRACEPRE COMMAND TO WATCH THE 'READ-WRITE HEAD' -
 THE CELL BETWEEN APOSTROPHES - MOVE OVER THE 'TAPE'. BLANK CELLS
 ARE REPRESENTED BY PERIODS.)

(EQUAL
    ((EQUAL) ; no As or Bs
        (=QACCEPT)) 
    ((EQUAL A 0)
        (PRE (. . ' A ' 3 . .) (=Q0)))
    ((EQUAL B 0)
        (PRE (. . ' B ' 3 . .) (=Q0)))
    ((0)
        (YOU MUST START WITH THE WORD EQUAL
         AND FOLLOW THAT WITH ANY COMBINATION OF THE LETTERS
         A AND B WITH SPACES BETWEEN EACH LETTER.)))

; The Turing machine read head is positioned at the symbol between the
; two apostrophes. Although the apostrophes are written to the tape, they
; are treated as not part of the tape contents.
;
; Empty cells on the "tape" are represented by periods. Each state begins
; by extending the tape to the left and right, if necessary, by prepending
; or appending an empty cell (i.e. a period). This makes the tape
; theoretically infinite.
;
; The choice of apostrophe and period for these roles is arbitrary; we
; need only choose symbols that a suitably constructed decompose pattern
; can recognise.


                                                      ; state   read    write   move    state'
(Q0
    ((' 0) (PRE (. ' 2) (=Q0)))
    ((0 ') (PRE (1 ' .) (=Q0)))
    ((0 1 ' A ' 1 0) (PRE (1   2   X ' 6 ' 7) (=Q1))) ; Q0      A       X       right   Q1
    ((0 1 ' B ' 1 0) (PRE (1   2   X ' 6 ' 7) (=Q2))) ; Q0      B       X       right   Q2
    ((0 1 ' X ' 1 0) (PRE (1   2   X ' 6 ' 7) (=Q0))) ; Q0      X       X       right   Q0
    ((0 1 ' . ' 1 0) (=QACCEPT)))                     ; Q0      .                       QACCEPT

(Q1
    ((' 0) (PRE (. ' 2) (=Q1)))
    ((0 ') (PRE (1 ' .) (=Q1)))
    ((0 1 ' A ' 1 0) (PRE (1   2   A ' 6 ' 7) (=Q1))) ; Q1      A       A       right   Q1
    ((0 1 ' B ' 1 0) (PRE (1 ' 2 ' X   6   7) (=Q3))) ; Q1      B       X       left    Q3
    ((0 1 ' X ' 1 0) (PRE (1   2   X ' 6 ' 7) (=Q1))) ; Q1      X       X       right   Q1
    ((0 1 ' . ' 1 0) (=QREJECT-A)))                   ; Q1      .                       QREJECT-A

(Q2
    ((' 0) (PRE (' . 2) (=Q2)))
    ((0 ') (PRE (1 ' .) (=Q2)))
    ((0 1 ' A ' 1 0) (PRE (1 ' 2 ' X   6   7) (=Q3))) ; Q2      A       X       left    Q3
    ((0 1 ' B ' 1 0) (PRE (1   2   B ' 6 ' 7) (=Q2))) ; Q2      B       B       right   Q2
    ((0 1 ' X ' 1 0) (PRE (1   2   X ' 6 ' 7) (=Q2))) ; Q2      X       X       right   Q2
    ((0 1 ' . ' 1 0) (=QREJECT-B)))                   ; Q2      .                       QREJECT-B

(Q3
    ((' 0) (PRE (. ' 2) (=Q3)))
    ((0 ') (PRE (1 ' .) (=Q3)))
    ((0 1 ' A ' 1 0) (PRE (1 ' 2 ' A   6   7) (=Q3))) ; Q3      A       A       left    Q3
    ((0 1 ' B ' 1 0) (PRE (1 ' 2 ' B   6   7) (=Q3))) ; Q3      B       B       left    Q3
    ((0 1 ' X ' 1 0) (PRE (1 ' 2 ' X   6   7) (=Q3))) ; Q3      X       X       left    Q3
    ((0 1 ' . ' 1 0) (PRE (1   2   . ' 6 ' 7) (=Q0)))); Q3      .       .       right   Q0

(QACCEPT
    ((0)
        (YES, THERE ARE THE SAME NUMBER OF A AND B LETTERS)))
(QREJECT-A
    ((0)
        (NO, THERE ARE MORE A'S THAN THERE ARE B'S IN THE SEQUENCE)))
(QREJECT-B
    ((0)
        (NO, THE SEQUENCE CONTAINS MORE B LETTERS THAN A LETTERS)))

(NONE
    ((0)
        (TRY TYPING EQUAL B A B A)))

(TURING
    ((0)
        (MACHINE)))

(MEMORY TURING
    (0 = TURING MACHINE)
    (0 = TURING MACHINE)
    (0 = TURING MACHINE)
    (0 = TURING MACHINE))
