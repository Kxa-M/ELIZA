; Script for Joseph Weizenbaum's ELIZA to decide if a string
; of As and Bs is a palindrome, to demonstrate that ELIZA is
; Turing Complete. Anthony C. Hay, 2022

(ELIZA CAN DECIDE IF A STRING OF LETTERS IS A PALINDROME.
 TYPE THE WORD 'PALP' FOLLOWED BY A STRING OF A AND B LETTERS,
 WITH SPACES BETWEEN EACH LETTER. ELIZA WILL RESPOND TRUE IF
 THE STRING IS A PALINDROME, OTHERWISE ELIZA RESPONDS FALSE.
 EG. TYPE 'PALP A B B A' AND ELIZA WILL RESPOND TRUE.)

(PALP
    ((PALP)
        (PRE (. . ' . ' . .) (=Q0)))    ; position head at blank
    ((PALP A 0)
        (PRE (. . ' A ' 3 . .) (=Q0)))  ; position head at first A
    ((PALP B 0)
        (PRE (. . ' B ' 3 . .) (=Q0)))  ; position head at first B
    ((0)
        (YOU MUST START WITH THE WORD PALP
         AND FOLLOW THAT WITH ANY COMBINATION OF THE LETTERS
         A AND B WITH SPACES BETWEEN EACH LETTER.)))

; The "tape" is the input list of words. Each word is a "cell" on
; the tape.
;
; The current position of the Turing Machine "head" is marked by
; the two apostrophes, one either side of the current head position.
;
; States are encoded as keywords. Each state (keyword) has one
; decomposition rule for each possible symbol under the head. The
; associated reassembly rule is a PRE rule that rewrites the tape
; according to the required change to the symbol, if any, and moves
; the head, if a move is required. Finally, the PRE rule tells
; ELIZA to continue processing the tape with the specified keyword,
; thus changing to a new state, if required.
;
; Each state begins by extending the tape to the left and right, if
; necessary, by appending an empty cell. The state is unchanged. The
; tape is extended only when there is no cell before (or after) the
; current head position. This makes the tape effectively infinite.
;
; This particular Turing Machine requires that the symbols on the
; tape be 'A', 'B' and '.', the latter representing a blank, or empty
; cell.
;
; On entry to Q0 the head must be positioned at the first cell
; in the sequence to be tested. If we are testing A B B A the
; cells on the tape (list of words) must be
;
;   ' A ' B B A
;
; The machine erases the A or B at the start (Q0), travels to the end
; (via Q1 if A at start, Q4 if B) and then expects to find a corresponding
; A (Q2) or B (Q5) at the end, which it also erases, before returning
; to the start (Q3) to repeat the process (Q0). When at the end (Q2 or Q5),
; if the wrong letter is there the sequence is not a palindrome; if there
; are no letters there the whole sequence has been erased and it was all
; palindromic.
;

                                                      ; state   read    write   move    state'
(Q0
    ((' 0) (PRE (. ' 2) (=Q0)))
    ((0 ') (PRE (1 ' .) (=Q0)))
    ((0 1 ' A ' 1 0) (PRE (1   2   . ' 6 ' 7) (=Q1))) ; Q0      A       .       right   Q1
    ((0 1 ' B ' 1 0) (PRE (1   2   . ' 6 ' 7) (=Q4))) ; Q0      B       .       right   Q4
    ((0 1 ' . ' 1 0) (=QACCEPT)))                     ; Q0      .                       QACCEPT

(Q1
    ((' 0) (PRE (. ' 2) (=Q1)))
    ((0 ') (PRE (1 ' .) (=Q1)))
    ((0 1 ' A ' 1 0) (PRE (1   2   A ' 6 ' 7) (=Q1))) ; Q1      A       A       right   Q1
    ((0 1 ' B ' 1 0) (PRE (1   2   B ' 6 ' 7) (=Q1))) ; Q1      B       B       right   Q1
    ((0 1 ' . ' 1 0) (PRE (1 ' 2 ' .   6   7) (=Q2)))); Q2      .       .       left    Q2

(Q2
    ((' 0) (PRE (' . 2) (=Q2)))
    ((0 ') (PRE (1 ' .) (=Q2)))
    ((0 1 ' A ' 1 0) (PRE (1 ' 2 ' .   6   7) (=Q3))) ; Q2      A       .       left    Q3
    ((0 1 ' B ' 1 0) (=QREJECT))                      ; Q2      B                       QREJECT
    ((0 1 ' . ' 1 0) (=QACCEPT)))                     ; Q2      .                       QACCEPT

(Q3
    ((' 0) (PRE (. ' 2) (=Q3)))
    ((0 ') (PRE (1 ' .) (=Q3)))
    ((0 1 ' A ' 1 0) (PRE (1 ' 2 ' A   6   7) (=Q3))) ; Q3      A       A       left    Q3
    ((0 1 ' B ' 1 0) (PRE (1 ' 2 ' B   6   7) (=Q3))) ; Q3      B       B       left    Q3
    ((0 1 ' . ' 1 0) (PRE (1   2   . ' 6 ' 7) (=Q0)))); Q3      .       .       right   Q0

(Q4
    ((' 0) (PRE (. ' 2) (=Q4)))
    ((0 ') (PRE (1 ' .) (=Q4)))
    ((0 1 ' A ' 1 0) (PRE (1   2   A ' 6 ' 7) (=Q4))) ; Q4      A       A       right   Q4
    ((0 1 ' B ' 1 0) (PRE (1   2   B ' 6 ' 7) (=Q4))) ; Q4      B       B       right   Q4
    ((0 1 ' . ' 1 0) (PRE (1 ' 2 ' .   6   7) (=Q5)))); Q4      .       .       left    Q5

(Q5
    ((' 0) (PRE (' . 2) (=Q5)))
    ((0 ') (PRE (1 ' .) (=Q5)))
    ((0 1 ' A ' 1 0) (=QREJECT))                      ; Q5      A                       QREJECT
    ((0 1 ' B ' 1 0) (PRE (1 ' 2 ' .   6   7) (=Q3))) ; Q5      B       .       left    Q3
    ((0 1 ' . ' 1 0) (=QACCEPT)))                     ; Q5      .                       QACCEPT

(QACCEPT
    ((0)
        (TRUE)))
(QREJECT
    ((0)
        (FALSE)))

(NONE
    ((0)
        (TRY TYPING 'PALP A B A')
        (TRY PALP A A A A)
        (TRY PALP B A, ELIZA SHOULD RESPOND FALSE)
        (TRY PALP B A B, ELIZA SHOULD RESPOND TRUE)))

(TURING
    ((0)
        (MACHINE)))

(MEMORY TURING
    (0 = TURING MACHINE)
    (0 = TURING MACHINE)
    (0 = TURING MACHINE)
    (0 = TURING MACHINE))
